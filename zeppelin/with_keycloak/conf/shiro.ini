####################################################################################
### An intergration demo for zeppelin, shiro, pac4j, keycloak 

[main]

sessionManager = org.apache.shiro.web.session.mgt.DefaultWebSessionManager

### If caching of user is required then uncomment below lines
#cacheManager = org.apache.shiro.cache.MemoryConstrainedCacheManager
#securityManager.cacheManager = $cacheManager

### Enables 'HttpOnly' flag in Zeppelin cookies
cookie = org.apache.shiro.web.servlet.SimpleCookie
cookie.name = JSESSIONID
cookie.httpOnly = true
### Uncomment the below line only when Zeppelin is running over HTTPS
#cookie.secure = true
sessionManager.sessionIdCookie = $cookie

securityManager.sessionManager = $sessionManager
# 86,400,000 milliseconds = 24 hour
securityManager.sessionManager.globalSessionTimeout = 86400000

#shiro.loginUrl = /api/login

####################################################################################
### Shiro's Realm
### But Zeppelin can't retrive roles from pac4j realm.

pac4jRealm = io.buji.pac4j.realm.Pac4jRealm
### the user id is displayed in default. preferred_username is from Keycloak.
pac4jRealm.principalNameAttribute = preferred_username
pac4jSubjectFactory = io.buji.pac4j.subject.Pac4jSubjectFactory
securityManager.subjectFactory = $pac4jSubjectFactory

####################################################################################
### Keycloak

### KeycloakOidcConfiguration and KeycloakOidcClient must be used at the same time, which are OIDC extensions.
#oidcConfig = org.pac4j.oidc.config.OidcConfiguration
#oidcConfig.discoveryURI = http://127.0.0.1:8081/realms/zeppelin/.well-known/openid-configuration 


keycloakOidcConfig = org.pac4j.oidc.config.KeycloakOidcConfiguration
### client settings in keycloak: Realm Name: zeppelin
### client settings in keycloak: Frontend URL: http://keycloak.local:8080
keycloakOidcConfig.realm = zeppelin
keycloakOidcConfig.baseUri = http://keycloak.keycloak:8080
### client settings in keycloak: Client Id: zeppelin
### client settings in keycloak: Client Protocol: openid-connect
### client settings in keycloak: Access Type: confidential
keycloakOidcConfig.clientId = zeppelin
### client settings in keycloak: Access Token Signature Algorithm & ID Token Signature Algorithm
keycloakOidcConfig.preferredJwsAlgorithmAsString = ES256
### client settings in keycloak: Client Authenticator: Client Id and Secret
keycloakOidcConfig.clientAuthenticationMethodAsString = client_secret_basic
keycloakOidcConfig.secret = UJ6kEXcsp8MF3Uqnd2jA9eg0bSPpLOmE
### client settings in keycloak: Client Scopes >> roles >> Mappers >> client roles >> Client ID : your client
#keycloakOidcConfig.scope = openid profile email roles

### redirect ajax. Or you will be redirect to /null
ajaxRequestResolver = org.pac4j.core.http.ajax.DefaultAjaxRequestResolver
ajaxRequestResolver.addRedirectionUrlAsHeader = true

keycloakOidcClient = org.pac4j.oidc.client.KeycloakOidcClient
keycloakOidcClient.configuration = $keycloakOidcConfig
keycloakOidcClient.ajaxRequestResolver = $ajaxRequestResolver

####################################################################################
### pac4j's Configuration. 

clients = org.pac4j.core.client.Clients
### client settings in keycloak: Root URL: http://keycloak.local:8080
### client settings in keycloak: Redirect URIs: /*
### /api/callback is a zeppelin's valid path
clients.callbackUrl = http://zeppelin.local:8080/api/callback
### multiple clients supported.
clients.clients = $keycloakOidcClient

### Role Based Authorization
requireRoleAdmin = org.pac4j.core.authorization.authorizer.RequireAnyRoleAuthorizer
### client settings in keycloak: Clients >> roles: add 'admin' role
### client settings in keycloak: mapping roles to user
requireRoleAdmin.elements = admin

config = org.pac4j.core.config.Config
config.clients = $clients
### authorizers need to be registered.
config.authorizers = admin:$requireRoleAdmin

####################################################################################
### urls filters

authenticatedUserFilter = io.buji.pac4j.filter.SecurityFilter
authenticatedUserFilter.config = $config
authenticatedUserFilter.clients = keycloakOidcClient
### DefaultAuthorizationChecker: the default authorizers are 'isAuthenticated' and 'csrfCheck'
### But csrfCheck(CsrfAuthorizer.java) is buggy. Safari is buggy too
authenticatedUserFilter.authorizers = isAuthenticated

adminFilter = io.buji.pac4j.filter.SecurityFilter
adminFilter.config = $config
adminFilter.clients = keycloakOidcClient
adminFilter.authorizers = isAuthenticated,admin
### plus means that default authorizers included.
#adminFilter.authorizers = +admin

callbackFilter = io.buji.pac4j.filter.CallbackFilter
callbackFilter.defaultUrl = /
callbackFilter.config = $config

### doesn't work now
centralLogout = io.buji.pac4j.filter.LogoutFilter
centralLogout.config = $config
centralLogout.localLogout = false
centralLogout.centralLogout = true
centralLogout.defaultUrl = http://zeppelin.local:8080/
centralLogout.logoutUrlPattern = http://zeppelin.local:8080/.*

[urls]
# This section is used for url-based security. For details see the shiro.ini documentation.
#
# You can secure interpreter, configuration and credential information by urls.
# Comment or uncomment the below urls that you want to hide:
# anon means the access is anonymous.
# authc means form based auth Security.
#
# IMPORTANT: Order matters: URL path expressions are evaluated against an incoming request
# in the order they are defined and the FIRST MATCH WINS.
#
# To allow anonymous access to all but the stated urls,
# uncomment the line second last line (/** = anon) and comment the last line (/** = authc)
#

/api/version = anon

/api/cluster/address = anon

# Allow all authenticated users to restart interpreters on a notebook page.
# Comment out the following line if you would like to authorize only admin users to restart interpreters.
/api/interpreter/setting/restart/** = authenticatedUserFilter
/api/interpreter/** = adminFilter

/api/notebook-repositories/** = adminFilter

#/api/configurations/** = authc, roles[admin]

/api/credential/** = adminFilter

/api/admin/** = adminFilter

/api/login/logout = centralLogout
/api/callback = callbackFilter
/** = authenticatedUserFilter
